name: CI/CD & Security Test Pipeline

on:
  push:
    branches:
      - test

env:
  GITHUB_TOKEN: ''
  
jobs:
#   build_and_deploy:
#     name: Build and Deploy Application
#     runs-on: ubuntu-latest
#     steps:
#       - name: üì• Checkout Code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
#       - name: Build Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/safedeploy:latest -f Dockerfile .
    
#       - name: Push Docker Image to Docker Hub
#         run: |
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/safedeploy:latest
     
#       - name: Install SSH key
#         run: |
#           mkdir -p ~/.ssh/
#           cd ~/.ssh/ 
#           touch id_rsa && touch known_hosts && chmod 600 id_rsa
#           echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa

#       - name: Add Droplet to known hosts
#         run: ssh-keyscan ${{ secrets.SERVER_IP_ADDRESS}} >> ~/.ssh/known_hosts

#       - name: Pull and run Docker images on Droplet
#         run: |
#           ssh ${{ secrets.SERVER_USER}}@${{ secrets.SERVER_IP_ADDRESS}} 'docker service update --force --image ${{ secrets.DOCKERHUB_USERNAME}}/safedeploy:latest services_backend'
#           ssh ${{ secrets.SERVER_USER}}@${{ secrets.SERVER_IP_ADDRESS}} 'docker image prune -a -f'


  dynamic_application_security_testing:
    name: DAST - OWASP ZAP Testing
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: üì• Checkout Code for Testing
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: üîç Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: ${{ secrets.SERVER_API }}
          cmd_options: '-x report.xml -u urls.txt'
          issue_title: ''
          fail_action: false
          allow_issue_writing: false

      - name: üíæ Upload XML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-xml
          path: report.xml

  upload_results:
    name: Upload Results to DefectDojo
    runs-on: ubuntu-latest
    needs: [dynamic_application_security_testing]
    steps:
      - name: Download ZAP XML Artifact
        uses: actions/download-artifact@v4
        with:
          name: zap-xml # Match the artifact name from zap_scan job
          path: reports/

      - name: Upload ZAP Report to DefectDojo
        run: |
          scan_date=$(date +%Y-%m-%d)
          curl -X POST "${{ secrets.DEFECTDOJO_API_URL }}" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F 'scan_type=ZAP Scan' \
            -F 'file=@reports/report.xml' \
            -F 'engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}' \
            -F 'minimum_severity=Low' \
            -F "scan_date=${scan_date}" \
            -F 'product_name=${{ secrets.DEFECTDOJO_PRODUCT_NAME }}'
