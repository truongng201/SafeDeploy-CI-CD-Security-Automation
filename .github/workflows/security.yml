name: CI/CD & Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  static_application_security_testing:
    name: SAST - SonarQube Testing
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: üì• Checkout Code for Testing
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run SonarQube Static Testing
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=.
            -Dsonar.language=html
            -Dsonar.sourceEncoding=UTF-8

      - name: üìã Generate SonarQube HTML Report
        uses: soprasteria/sonar-report@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          output-file: reports/sonarqube-report.html

      - name: üîç Inspect SonarQube HTML Report
        run: |
          echo "SonarQube HTML Report Contents:"
          cat reports/sonarqube-report.html

      - name: üíæ Upload SonarQube HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-html
          path: reports/sonarqube-report.html

  software_composition_analysis:
    name: SCA - Snyk Testing
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: üì• Checkout Code for Testing
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=reports/snyk-results.json

      - name: üíæ Upload Snyk JSON results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-json
          path: reports/snyk-results.json

  build_and_scan:
    name: Build and Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üê≥ Build Docker Image
        run: |
          docker build -t myapp:latest .
          echo "‚úÖ Docker image 'myapp:latest' built."

      - name: üîç Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:latest
          format: json
          output: reports/trivy-results.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üíæ Upload Trivy JSON results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json
          path: reports/trivy-results.json

  upload_results:
    name: Upload Results to DefectDojo
    runs-on: ubuntu-latest
    needs: [static_application_security_testing, software_composition_analysis, build_and_scan]
    steps:
      - name: üì• Checkout Code for Uploading Results
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì• Download SonarQube Artifact
        uses: actions/download-artifact@v4
        with:
          name: sonarqube-html
          path: reports/

      - name: üì• Download Snyk Artifact
        uses: actions/download-artifact@v4
        with:
          name: snyk-json
          path: reports/

      - name: üì• Download Trivy Artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-json
          path: reports/

      - name: üì§ Upload SonarQube Report to DefectDojo
        run: |
          scan_date=$(date +%Y-%m-%d)
          response=$(curl -X POST "${{ secrets.DEFECTDOJO_API_URL }}" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F 'scan_type=SonarQube Scan' \
            -F 'file=@reports/sonarqube-report.html' \
            -F 'engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}' \
            -F 'minimum_severity=Low' \
            -F "scan_date=${scan_date}" \
            -F 'product_name=${{ secrets.DEFECTDOJO_PRODUCT_NAME }}' \
            -w "%{http_code}" -o defectdojo_sonarqube_response.json)
          echo "HTTP Status: $response"
          echo "DefectDojo SonarQube Response:"
          cat defectdojo_sonarqube_response.json

      - name: üì§ Upload Snyk Report to DefectDojo
        run: |
          scan_date=$(date +%Y-%m-%d)
          response=$(curl -X POST "${{ secrets.DEFECTDOJO_API_URL }}" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F 'scan_type=Snyk Scan' \
            -F 'file=@reports/snyk-results.json' \
            -F 'engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}' \
            -F 'minimum_severity=Low' \
            -F "scan_date=${scan_date}" \
            -F 'product_name=${{ secrets.DEFECTDOJO_PRODUCT_NAME }}' \
            -w "%{http_code}" -o defectdojo_snyk_response.json)
          echo "HTTP Status: $response"
          echo "DefectDojo Snyk Response:"
          cat defectdojo_snyk_response.json

      - name: üì§ Upload Trivy Report to DefectDojo
        run: |
          scan_date=$(date +%Y-%m-%d)
          response=$(curl -X POST "${{ secrets.DEFECTDOJO_API_URL }}" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_TOKEN }}" \
            -F 'scan_type=Trivy Scan' \
            -F 'file=@reports/trivy-results.json' \
            -F 'engagement=${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}' \
            -F 'minimum_severity=Low' \
            -F "scan_date=${scan_date}" \
            -F 'product_name=${{ secrets.DEFECTDOJO_PRODUCT_NAME }}' \
            -w "%{http_code}" -o defectdojo_trivy_response.json)
          echo "HTTP Status: $response"
          echo "DefectDojo Trivy Response:"
          cat defectdojo_trivy_response.json