name: CI/CD & DevSecOps Pipeline

on:
  push:
    branches:
      - main

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
  DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
  DEFECTDOJO_ENGAGEMENT_ID: ${{ secrets.DEFECTDOJO_ENGAGEMENT_ID }}

jobs:
  devsecops:
    name: DevSecOps Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Snyk Vulnerability Scan
        uses: snyk/actions@v1
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: Build Docker Image
        run: |
          cd services/order/
          docker build -t my-app:latest .

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-app:latest
          format: json
          output: trivy-report.json

      - name: Upload Trivy Report to DefectDojo
        run: |
          curl -X POST "${DEFECTDOJO_URL}/api/v2/import-scan/" \
            -H "Authorization: Token ${DEFECTDOJO_API_KEY}" \
            -F 'file=@trivy-report.json' \
            -F 'engagement=${DEFECTDOJO_ENGAGEMENT_ID}' \
            -F 'scan_type=Container Scan' \
            -F 'active=true' \
            -F 'verified=true' \
            -F 'auto_create_context=true'

      - name: DevSecOps Complete
        run: echo "âœ… DevSecOps security scans and reporting complete."

  build_and_deploy:
    name: Build & Deploy Order Service
    runs-on: ubuntu-latest
    needs: devsecops

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker Hub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Order Service Docker Image
        run: |
          cd services/order/
          docker build \
            --build-arg SERVICE_NAME=order \
            --build-arg APP_VERSION=${{ github.sha }} \
            --build-arg ENV=production \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}-order-service:latest \
            -f Dockerfile.prod .

      - name: Push Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}-order-service:latest

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add Droplet to Known Hosts
        run: ssh-keyscan ${{ secrets.SERVER_IP_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Deploy to Droplet
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP_ADDRESS }} "
            docker service update --force \
              --image ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}-order-service:latest \
              services_order &&
            docker image prune -a -f
          "
