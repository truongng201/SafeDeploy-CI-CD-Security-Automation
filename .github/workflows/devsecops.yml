name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}:latest
  STAGING_URL: https://staging.example.com

jobs:
  ################################
  # 1. SCA - Dependency Check
  ################################
  sca:
    name: SCA - Snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Snyk Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --severity-threshold=high

  ################################
  # 2. SBOM Generation
  ################################
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate SBOM
        run: |
          npm install -g @cyclonedx/bom
          cyclonedx-bom -o bom.xml

  ################################
  # 3. SAST - CodeQL
  ################################
  sast:
    name: SAST - CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ['javascript']
      - uses: github/codeql-action/analyze@v3

  ################################
  # 4. Build Docker Image
  ################################
  build:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: [sca, sast, sbom]
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker Image
        run: docker push $IMAGE_NAME

  ################################
  # 5. Unit + Coverage + Integration Test
  ################################
  test:
    name: Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test

      - name: Code Coverage Check
        run: npm run coverage

      - name: Integration Tests
        run: npm run integration

  ################################
  # 6. IaC Scan - Checkov
  ################################
  iac:
    name: IaC Scan - Checkov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
        continue-on-error: false

  ################################
  # 7. Image Scan - Trivy
  ################################
  trivy:
    name: Scan Container - Trivy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          exit-code: 1
          format: 'table'
          severity: 'HIGH,CRITICAL'

  ################################
  # 8. DAST - Checkmarx or ZAP
  ################################
  dast:
    name: DAST - ZAP Baseline
    runs-on: ubuntu-latest
    needs: [test, trivy]
    steps:
      - name: OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ env.STAGING_URL }}
        continue-on-error: false

  ################################
  # 9. GitOps (Optional)
  ################################
  gitops:
    name: GitOps Trigger
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Update GitOps Repo (Placeholder)
        run: echo "Trigger ArgoCD / FluxCD sync here."

  ################################
  # 10. Notify on Failure
  ################################
  notify:
    name: Notify
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "ðŸš¨ DevSecOps pipeline failed for ${{ github.repository }} on `${{ github.ref_name }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Discord Notification (optional)
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{"content": "ðŸš¨ DevSecOps pipeline failed!"}' \
               ${{ secrets.DISCORD_WEBHOOK }}
